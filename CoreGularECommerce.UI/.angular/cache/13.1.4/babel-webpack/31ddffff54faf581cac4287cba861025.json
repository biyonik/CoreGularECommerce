{"ast":null,"code":"import _asyncToGenerator from \"I:\\\\Projects\\\\NetCore\\\\CoreGularECommerce\\\\CoreGularECommerce.UI\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../http-client.service\";\nexport class ProductService {\n  constructor(httpClientService) {\n    this.httpClientService = httpClientService;\n  }\n\n  create(product, successCallBack, errorCallback) {\n    this.httpClientService.post({\n      controller: 'Products'\n    }, product).subscribe(result => {\n      successCallBack();\n    }, errorResponse => {\n      const _error = errorResponse.error;\n      let message = '';\n\n      _error.forEach((keyValuePair, index) => {\n        keyValuePair.value.forEach((_v, _index) => {\n          message += `${_v}<br>`;\n        });\n      });\n\n      errorCallback(message);\n    });\n  }\n\n  read() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.httpClientService.get({\n        controller: 'Products'\n      }).toPromise();\n    })();\n  }\n\n  update(product) {}\n\n  delete(product) {}\n\n}\n\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClientService));\n};\n\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["I:/Projects/NetCore/CoreGularECommerce/CoreGularECommerce.UI/src/app/services/common/models/product.service.ts"],"names":["i0","i1","ProductService","constructor","httpClientService","create","product","successCallBack","errorCallback","post","controller","subscribe","result","errorResponse","_error","error","message","forEach","keyValuePair","index","value","_v","_index","read","get","toPromise","update","delete","ɵfac","ProductService_Factory","t","ɵɵinject","HttpClientService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,iBAAD,EAAoB;AAC3B,SAAKA,iBAAL,GAAyBA,iBAAzB;AACH;;AACDC,EAAAA,MAAM,CAACC,OAAD,EAAUC,eAAV,EAA2BC,aAA3B,EAA0C;AAC5C,SAAKJ,iBAAL,CAAuBK,IAAvB,CAA4B;AACxBC,MAAAA,UAAU,EAAE;AADY,KAA5B,EAEGJ,OAFH,EAEYK,SAFZ,CAEsBC,MAAM,IAAI;AAC5BL,MAAAA,eAAe;AAClB,KAJD,EAIIM,aAAD,IAAmB;AAClB,YAAMC,MAAM,GAAGD,aAAa,CAACE,KAA7B;AACA,UAAIC,OAAO,GAAG,EAAd;;AACAF,MAAAA,MAAM,CAACG,OAAP,CAAe,CAACC,YAAD,EAAeC,KAAf,KAAyB;AACpCD,QAAAA,YAAY,CAACE,KAAb,CAAmBH,OAAnB,CAA2B,CAACI,EAAD,EAAKC,MAAL,KAAgB;AACvCN,UAAAA,OAAO,IAAK,GAAEK,EAAG,MAAjB;AACH,SAFD;AAGH,OAJD;;AAKAb,MAAAA,aAAa,CAACQ,OAAD,CAAb;AACH,KAbD;AAcH;;AACKO,EAAAA,IAAI,GAAG;AAAA;;AAAA;AACT,YAAM,KAAI,CAACnB,iBAAL,CAAuBoB,GAAvB,CAA2B;AAC7Bd,QAAAA,UAAU,EAAE;AADiB,OAA3B,EAEHe,SAFG,EAAN;AADS;AAIZ;;AACDC,EAAAA,MAAM,CAACpB,OAAD,EAAU,CAAG;;AACnBqB,EAAAA,MAAM,CAACrB,OAAD,EAAU,CAAG;;AA1BK;;AA4B5BJ,cAAc,CAAC0B,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAI5B,cAAV,EAA0BF,EAAE,CAAC+B,QAAH,CAAY9B,EAAE,CAAC+B,iBAAf,CAA1B,CAAP;AAAsE,CAAjI;;AACA9B,cAAc,CAAC+B,KAAf,GAAuB,aAAcjC,EAAE,CAACkC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEjC,cAAT;AAAyBkC,EAAAA,OAAO,EAAElC,cAAc,CAAC0B,IAAjD;AAAuDS,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"../http-client.service\";\r\nexport class ProductService {\r\n    constructor(httpClientService) {\r\n        this.httpClientService = httpClientService;\r\n    }\r\n    create(product, successCallBack, errorCallback) {\r\n        this.httpClientService.post({\r\n            controller: 'Products'\r\n        }, product).subscribe(result => {\r\n            successCallBack();\r\n        }, (errorResponse) => {\r\n            const _error = errorResponse.error;\r\n            let message = '';\r\n            _error.forEach((keyValuePair, index) => {\r\n                keyValuePair.value.forEach((_v, _index) => {\r\n                    message += `${_v}<br>`;\r\n                });\r\n            });\r\n            errorCallback(message);\r\n        });\r\n    }\r\n    async read() {\r\n        await this.httpClientService.get({\r\n            controller: 'Products'\r\n        }).toPromise();\r\n    }\r\n    update(product) { }\r\n    delete(product) { }\r\n}\r\nProductService.ɵfac = function ProductService_Factory(t) { return new (t || ProductService)(i0.ɵɵinject(i1.HttpClientService)); };\r\nProductService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProductService, factory: ProductService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}